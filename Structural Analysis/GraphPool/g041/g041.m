classdef g041 < model
    
    methods
        function this = g041()
            this.name = 'g041';
            this.description = ['Fixed-wing aircraft, modeled after Beard/McLain Small Unmanned Aircraft Book'];
            
            %% Equation list
            % legend:
            % dot - differential relation
            % int - integral term
            % trig - trigonometric term
            % ni - general non-invertible term
            % inp - input variable
            % out - output variable % NOT SUPPORTED
            % msr - measured variable
            % sub - subsystem where the equation belongs
            % mat - matrix variable
            % expr - algebraic expression
            % par - parameter
            % dist - disturbance
            % rg - residual generator
            
            %% Variable tally
            
            % Unknown Variables
            % Should appear as var(c), NOT as msr or inp
         
            
            % Known/measured variables
            % Should appear in sensor equations OR fixed constraints,
            % should appear as msr or inp
      
            
            % Constants, parameters
            % S, b, c
            % CD_*, CL_*, CY_*, Cl_*, Cm_*, Cn_*
            % D, J_mot, J_prop, R_m, R_1, R_bat, R_s, I_0,
            % R_M, R_N, r_0
            % L_0, M_0, R_star
            
            %%
            kin = [...
                {'dot_pn ni u ni v ni w ni Phi ni Theta ni Psi expr -dot_pn+(cos(Theta)*cos(Psi))*u+(sin(Phi)*sin(Theta)*cos(Psi)-cos(Phi)*sin(Psi))*v+(cos(Phi)*sin(Theta)*cos(Psi)+sin(Phi)*sin(Psi))*w'};...
                {'dot_pe ni u ni v ni w ni Phi ni Theta ni Psi expr -dot_pe+(cos(Theta)*sin(Psi))*u+(sin(Phi)*sinTheta)*sin(Psi)+cos(Phi)*cos(Psi))*v+(cos(Phi)*sin(Theta)*sin(Psi)-sin(Phi)*cos(Psi))*w'};...
                {'dot_h ni u ni v w Theta ni Phi expr -dot_h+u*sin(Theta)-v*sin(Phi)*cos(Theta)-w*cos(Phi)*cos(Theta)'};...
                {'dot_u ni v ni w ni p ni q Fx par m expr -dot_u+r*v-q*w+Fx/m'};...
                {'dot_v ni u ni w ni p ni r Fy par m expr -dot_v+p*w-r*u+Fy/m'};...
                {'dot_w ni u ni v ni q ni p Fz par m expr -dot_w+q*u-p*v+Fz/m'};...
                {'dot_Phi p ni q ni r ni Phi ni Theta expr -dot_Phi+p+q*sin(Phi)*tan(Theta)+r*cos(Phi)*tan(Theta)'};...
                {'dot_Theta q ni r ni Phi expr -dot_Theta+q*cos(Phi)-r*sin(Phi)'};...
                {'dot_Psi ni q ni r ni Phi ni Theta expr -dot_Psi+q*sin(Phi)*sec(Theta)+r*cos(Phi)*sec(Theta)'};...
                {'dot_p ni p ni q ni r L par G1 par G2 expr -dot_p+G1*p*q-G2*q*r+L'};...
                {'dot_q ni p ni r M par G5 par G6 expr -dot_q+G5*p*r-G6*(p*p-r*r)+M'};...
                {'dot_r ni p ni q ni r N par G7 par G1 expr -dot_r+G7*p*q-G1*q*r+N'};...
                {'Va u v w expr -Va+sqrt(u*u+v*v+w*w)'};...
                ];
            
            der = [...
                {'dot pn int dot_pn'};...
                {'dot pe int dot_pe'};...
                {'dot h int dot_h'};...
                {'dot u int dot_u'};...
                {'dot v int dot_v'};...
                {'dot w int dot_w'};...
                {'dot Phi int dot_Phi'};...
                {'dot Theta int dot_Theta'};...
                {'dot Psi int dot_Psi'};...
                {'dot p int dot_p'};...
                {'dot q int dot_q'};...
                {'dot r int dot_r'};...
                ];
                
            dyn = [...
                {'Fx Fgx Fax Fpx expr -Fx+Fgx+Fax+Fpx'};...
                {'Fy Fgy Fay expr -Fy+Fgy+Fay'};...
                {'Fz Fgz Faz expr -Fz+Fgz+Faz'};...
                {'Fgx par g Theta expr -Fgx-g*sin(Theta)'};...
                {'Fgy par g ni Theta Phi expr -Fgy+g*cos(Theta)*sin(Phi)'};...
                {'Fgz par g Theta Phi expr -Fgz+g*cos(Theta)*cos(Phi)'};...
                {'qbar par rho Va expr -qbar+rho*Va^2/2'};...
                {'Fax qbar par S Cx ni Cxq par c q ni Va ni Cxde de expr -Fax+qbar*S*(Cxa+Cxq*c*q/2/Va+Cxde*de)'};...
                {'Fay p r aos da dr ni Va qbar par Cy0 par Cyb par Cyp par Cyr par Cyda par Cydr par AR par S expr -Fay+qbar*S*(Cy0+Cyb*aos+Cyp*AR*p/2/Va+Cyr*AR*r/2/Va+Cyda*da+Cyr*dr)'};...
                {'Faz qbar par S Cz ni Czq par c q ni Va Czde de expr -Faz+qbar*S*(Cz+Czq*c*q/2/Va+Czde*de)'};...
                {'Fpx par rho par Sprop par Cprop par Kmotor dt Va expr -Fpx+rho*Sprop*Cprop/2*((kmotor*dt)^2-Va^2)'};...
                {'L ni qbar par S par AR Cp0 ni Cpb aos ni Cpp p ni Va ni Cpr r ni Cpda da Cpdr dr expr -L+qbar*S*AR*(Cp0+Cpb*aos+Cpp*AR*p/2/Va+Cpr*AR*r/2/Va+Cpda*da+Cpdr*dr)'};...
                {'M ni qbar par S par c par Jy Cm0 ni Cma aoa ni Cmq q ni Va ni Cmde de expr -M+qbar*S*c/Jy*(Cm0+Cma*aoa+Cmq*c*q/2/Va+Cmde*de)'};...
                {'N ni qbar par S par AR Cr0 ni Crb aos ni Crp p ni Va ni Crr r ni Crda da ni Crdr dr expr -N+qbar*S*AR*(Cr0+Crb*aos+Crp*AR*p/2/Va+Crr*AR*r/2/Va+Crda*da+Crdr*dr)'};...
                {'Cp0 par G3 par Cl0 par G4 par Cn0 expr -Cp0+G3*Cl0+G4*Cn0'};...
                {'Cpb par G3 par Clb par G4 par Cnb expr -Cpb+G3*Clb+G4*Cnb'};...
                {'Cpp par G3 par Clp par G4 par Cnp expr -Cpp+G3*Clp+G4*Cnp'};...
                {'Cpr par G3 par Clr par G4 par Cnr expr -Cpr+G3*Clr+G4*Cnr'};...
                {'Cpda par G3 par Clda par G4 par Cnda expr -Cpda+G3*Clda+G4*Cnda'};...
                {'Cpdr par G3 par Cldr par G4 par Cndr expr -Cpdr+G3*Cldr+G4*Cndr'};...
                {'Cr0 par G4 par Cl0 par G8 par Cn0 expr -Cr0+G4*Cl0+G8*Cn0'};...
                {'Crb par G4 par Clb par G8 par Cnb expr -Crb+G4*Clb+G8*Cnb'};...
                {'Crp par G4 par Clp par G8 par Cnp expr -Crp+G4*Clp+G8*Cnp'};...
                {'Crr par G4 par Clr par G8 par Cnr expr -Crr+G4*Clr+G8*Cnr'};...
                {'Crda par G4 par Clda par G8 par Cnda expr -Crda+G4*Clda+G8*Cnda'};...
                {'Crdr par G4 par Cldr par G8 par Cndr expr -Crdr+G4*Cldr+G8*Cndr'};...
                {'Cx CD ni CL aoa expr -Cx-CD*cos(aoa)+CL*sin(aoa)'};...
                {'Cxq par CDq ni par CLq aoa expr -Cx-CDq*cos(aoa)+CLq*sin(aoa)'};...
                {'Cxde par CDde ni par CLde aoa expr -Cxde-CDde*cos(aoa)+CLde*sin(aoa)'};...
                {'Cz ni CD CL aoa expr -Cz-CD*sin(aoa)-CL*cos(aoa)'};...
                {'Czq par CDq par CLq aoa expr -Czq-CDq*sin(aoa)-CLq*cos(aoa)'};...
                {'Czde par CDde par CLde aoa expr -Czde-CDde*sin(aoa)-CLde*cos(aoa)'};...
                {'CL par CL0 par CLa aoa expr -CL+CL0+CLa*aoa'};...
                {'CD par CD0 par CDa aoa expr -CD+CD0+CDa*aoa'};...
            ];
            
            msr = [...
                {'fault dt inp dtc expr equal'};...
                {'fault da inp dac expr equal'};...
                {'fault de inp dec expr equal'};...
                {'fault dr inp drc expr equal'};...
                {'fault Va msr Vam expr equal'};...
                {'fault p msr pm expr equal'};...
                {'fault q msr qm expr equal'};...
                {'fault r msr rm expr equal'};...
                {'fault Phi msr Phim expr equal'};...
                {'fault Theta msr Thetam expr equal'};...
                {'fault Psi msr Psim expr equal'};...
                ];
            
            this.constraints = [...
                {kin},{'k'};...
                {der},{'d'};...
                {dyn},{'f'};...
                {msr},{'s'};...
                ];            
        end
        
    end
    
end