classdef g014h < model
    
    methods
        function this = g014h()
            this.name = 'g014h';
            this.description = ['Fixed-wing UAV model, revized, according to uav-modeling, with no extra \dot{x} terms.' ...
                'IC engine. Converting some scalar equations to vectors. With added sumbodule information' ...
                'With added parameter equations'];
            
            %% Equation list
            % legend:
            % dot - differential relation
            % int - integral term
            % trig - trigonometric term
            % ni - general non-invertible term
            % inp - input variable
            % out - output variable % NOT SUPPORTED
            % msr - measured variable
            % sub - subsystem where the equation belongs
            
            %% Variable tally
            
            % Unknown Variables
            % Should appear as var(c), NOT as msr or inp
            % dot_north, dot_east, dot_down, north, east, down
            % dot_phi, dot_theta, dot_psi, phi, theta, psi
            % dot_u, dot_v, dot_w, u, v, w
            % dot_p, dot_q, dot_r, p, q, r
            % c_0, c_1, c_2, Ji_X
            % V_i, chi, gamma, V_g
            % F_x, F_y, F_z, T_x, T_y, T_z
            % u_r, v_r, w_r, V_a, alpha, beta, u_w, v_w, w_w
            % m, m_nom, p_cm_x, p_cm_y, p_cm_z, J_nom_0, J_0, D_J
            % F_g_x, F_g_y, F_g_z, g
            % F_a_x, F_a_y, F_a_z, F_D, F_Y, F_Z, dx_CL, dy_CL, dz_CL
            % T_atot_x, T_atot_y, T_atot_z
            % q_bar, rho
            % C_D, C_Y, C_L, C_l, C_m, C_n
            % delta_a, delta_e, delta_t, delta_r
            % F_t_x, C_t, n_prop, F_t_y, F_t_z, T_t_x, T_t_y, T_t_z
            % dx_prop, dy_prop, dz_prop, T_ttot_x, T_ttot_y, T_ttot_z
            % Jar, C_p, P_prop, dot_n_prop
            % P_mot, E_i, I_i, V_mot, I_mot, P_elec, V_bat
            % h, z, lat, lon, lat_0, lon_0, z_0
            % T, P, P_t, 
            % T_0, P_0, h_0
            % w_n, w_e
            
            % Known/measured variables
            % Should appear in sensor equations OR fixed constraints,
            % should appear as msr or inp
            % m_nom, J_nom_0
            % p_CL_x, p_CL_y, p_CL_z
            % g_0
            % delta_am, delta_em, delta_tm, delta_rm
            % p_prop_x, p_prop_y, p_prop_z
            % lat_0_m, lon_0_m, z_0_m
            % T_0_m, P_0_m, h_0_m
            % a_m_x, a_m_y, a_m_z, p_m, q_m, r_m
            % phi_m, theta_m, psi_m
            % lat_m, lon_m, z_m, V_g_m, chi_m
            % P_m, T_m, P_t_m
            % alpha_m, beta_m
            % V_mot_m, I_mot_m, n_prop_m
            
            % Constants, parameters
            % Shall appear nowhere
            % S, b, c
            % CD_*, CL_*, CY_*, Cl_*, Cm_*, Cn_*
            % D, J_mot, J_prop, R_m, R_1, R_bat, R_s, I_0,
            % R_M, R_N, r_0
            % L_0, M_0, R_star
            
            %% Kinematic Equations
            
            % Position derivatives
            kin = [...
                {'dot_north ni phi ni theta ni psi ni u ni v ni w sub kinematics expr -dot_north+(cos(theta)*cos(psi))*u+(-cos(phi)*sin(psi)+sin(phi)*sin(theta)*cos(psi))*v+(sin(phi)*sin(psi)+cos(phi)*sin(theta)*cos(psi))*w'};...
                {'dot_east ni phi ni theta ni psi ni u ni v ni w sub kinematics expr -dot_east+(cos(theta)*sin(psi))*u+(cos(phi)*cos(psi)+sin(phi)*sin(theta)*sin(psi))*v+(-sin(phi)*cos(psi)+cos(phi)*sin(theta)*sin(psi))*w'};...
                {'dot_down ni phi ni theta ni psi ni u ni v ni w sub kinematics expr -dot_down+(-sin(theta))*u+(sin(phi)*cos(theta))*v+(cos(phi)*cos(theta))*w'};...
                ];
            
            der = [...
                {'int dot_north dot north sub kinematics expr differentiator'};...
                {'int dot_east dot east sub kinematics expr differentiator'};...
                {'int dot_down dot down sub kinematics expr differentiator'};
                ];
            
            % Euler angle derivatives
            kin = [kin;...
                {'dot_phi ni phi ni theta p ni q ni r sub kinematics expr -dot_phi+p+(tan(theta)*sin(phi))*q+(tan(theta)*cos(phi))*r'};...
                {'dot_theta ni phi q ni r sub kinematics expr -dot_theta+(cos(phi))*q+(-sin(phi))*r'};...
                {'dot_psi ni phi ni theta ni q r sub kinematics expr -dot_psi+(sin(phi)/cos(theta))*q+(cos(phi)/cos(theta))*r'};...
                ];
            
            der = [der;...
                {'int dot_phi dot phi sub kinematics expr differentiator'};...
                {'int dot_theta dot theta sub kinematics expr differentiator'};...
                {'int dot_psi dot psi sub kinematics expr differentiator'};...
                ];
            
            % Angular Velocity
            kin = [kin;...
                {'C_0 ni p ni q ni r par J6 par J7 par J8 par J3 par J4 par J5 sub kinematics expr -C_0+q*(J6*p+J7*q+J8*r)-r*(J3*p+J4*q+J_5*r)'};...
                {'C_1 ni p ni q ni r par J0 par J1 par J2 par J6 par J7 par J8 sub kinematics expr -C_1+r*(J0*p+J1*q+J2*r)-p*(J6*p+J7*q+J_8*r)'};...
                {'C_2 ni p ni q ni r par J3 par J4 par J5 par J0 par J1 par J2 sub kinematics expr -C_2+p*(J3*p+J4*q+J5*r)-q*(J0*p+J1*q+J_2*r)'};...
                {'dot_p ni Ji_0 ni Ji_1 ni Ji_2 ni T_x ni T_y ni T_z ni C_0 ni C_1 ni C_2 sub kinematics expr -dot_p+Ji_0*(T_x-C_0)+Ji_1*(T_y-C_1)+Ji_2*(T_z-C_2)'};...
                {'dot_q ni Ji_3 ni Ji_4 ni Ji_5 ni T_x ni T_y ni T_z ni C_0 ni C_1 ni C_2 sub kinematics expr -dot_q+Ji_3*(T_x-C_0)+Ji_4*(T_y-C_1)+Ji_5*(T_z-C_2)'};...
                {'dot_r ni Ji_6 ni Ji_7 ni Ji_8 ni T_x ni T_y ni T_z ni C_0 ni C_1 ni C_2 sub kinematics expr -dot_r+Ji_6*(T_x-C_0)+Ji_7*(T_y-C_1)+Ji_8*(T_z-C_2)'};...
                ];
            
            der = [der;...
                {'int dot_p dot p sub kinematics expr differentiator'};...
                {'int dot_q dot q sub kinematics expr differentiator'};...
                {'int dot_r dot r sub kinematics expr differentiator'};...
                ];
            
            % Linear Velocity
            kin = [kin;...
                {'V_i ni u ni v ni w sub kinematics expr -V_i+sqrt(u*u+v*v+w*w)'};...
                %%
                {'chi ni u ni v ni w ni phi ni theta ni psi sub kinematics expr -chi+atan2(dot_east,dot_north)'};... % ni needed here to keep the system semi-explicit DAE
                {'gamma ni u ni v ni w ni phi ni theta ni psi V_i sub kinematics expr -gamma+asin(-dot_down/V_i)'};...
                %%
                {'V_g V_i gamma sub kinematics expr -V_g+V_i*cos(gamma)'};... % Is a "ni" in front of V_i reasonable? - I choose to let it as is
                {'dot_u ni v ni w ni r ni q F_x ni m sub kinematics expr -dot_u+r*v-q*w+F_x/m'};...
                {'dot_v ni u ni w ni p r F_y ni m sub kinematics expr -dot_v+r*u+p*w+F_y/m'};...
                {'dot_w ni u ni v ni p q F_z ni m sub kinematics expr -dot_w+q*u-p*v+F_z/m'};...
                ];
            
            der = [der;...
                {'int dot_u dot u sub kinematics expr differentiator'};...
                {'int dot_v dot v sub kinematics expr differentiator'};...
                {'int dot_w dot w sub kinematics expr differentiator'};...
                ];
            
            % Air data
            kin = [kin;...
                {'u_r u u_w sub airdata expr -u_r+u-u_w'};...
                {'v_r v v_w sub airdata expr -v_r+v-v_w'};...
                {'w_r w w_w sub airdata expr -w_r+w-w_w'};...
                {'alpha w_r u_r sub airdata expr -alpha+atan2(w_r,u_r)'};...
                {'beta v_r V_a sub airdata expr -beta+asin(v_r/V_a)'};...
                {'V_a ni u_r ni v_r ni w_r sub airdata expr -V_a+sqrt(u_r*u_r+v_r*v_r+w_r*w_r)'};...
                ];
            
            % Mass Distribution
            kin = [kin;...
%                 {'m sub mass expr -m+12.5'};... % Known nominal mass
%                 {'p_cm_x sub mass expr -p_cm_x+0'};... % Known center of mass coordinates, defined at zero
%                 {'p_cm_y sub mass expr -p_cm_y+0'};...
%                 {'p_cm_z sub mass expr -p_cm_z+0'};...
%                 {'par J_0 sub mass expr -J_0+1'};... known inertia components % TODO: find actual values
%                 {'par J_1 sub mass expr -J_1+1'};...
%                 {'par J_2 sub mass expr -J_2+1'};...
%                 {'par J_3 sub mass expr -J_3+1'};...
%                 {'par J_4 sub mass expr -J_4+1'};...
%                 {'par J_5 sub mass expr -J_5+1'};...
%                 {'par J_6 sub mass expr -J_6+1'};...
%                 {'par J_7 sub mass expr -J_7+1'};...
%                 {'par J_8 sub mass expr -J_8+1'};...
                {'detJ ni par J0 ni par J1 ni par J2 ni par J3 ni par J4 ni par J5 ni par J6 ni par J7 ni par J8 sub mass expr -detJ+1/(J0*J4*J8-J0*J5*J7-J1*J3*J8+J1*J5*J6+J2*J3*J7-J2*J4*J6)'};...
                {'Ji0 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji0+(J4*J8-J5*J7)/detJ'};...
                {'Ji1 ni detJ ni par J1 ni par J8 ni par J2 ni par J7 sub mass expr -Ji1+(-J1*J8+J2*J7)/detJ'};...
                {'Ji2 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji2+(J1*J5-J2*J4)/detJ'};...
                {'Ji3 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji3+(-J3*J8+J8*J6)/detJ'};...
                {'Ji4 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji4+(J0*J8-J8*J6)/detJ'};...
                {'Ji5 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji5+(-J0*J5+J5*J3)/detJ'};...
                {'Ji6 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji6+(J3*J7-J4*J6)/detJ'};...
                {'Ji7 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji7+(-J0*J7+J1*J6)/detJ'};...
                {'Ji8 ni detJ ni par J4 ni par J8 ni par J5 ni par J7 sub mass expr -Ji8+(J0*J4-J1*J3)/detJ'};...
                ];
            
            %% Dynamic Equations
            dyn = [];
            
            dyn = [dyn;...
                {'F_x F_g_x F_a_x F_t_x sub dynamics expr -F_x+F_g_x+F_a_x+F_t_x'};...
                {'F_y F_g_y F_a_y F_t_y sub dynamics expr -F_y+F_g_y+F_a_y+F_t_y'};...
                {'F_z F_g_z F_a_z F_t_z sub dynamics expr -F_z+F_g_z+F_a_z+F_t_z'};...
                {'T_x T_a_x T_ttot_x sub dynamics'};...
                {'T_y T_a_y T_ttot_y sub dynamics expr -T_y+T_a_y+T_ttot_y'};...
                {'T_z T_a_z T_ttot_z sub dynamics'};...
                ];
            
            % Gravity
            dyn = [dyn;...
                {'F_g_x theta ni par m ni g sub gravity expr -F_g_x-sin(theta)*m*g'};...
                {'F_g_y phi ni theta ni par m ni g sub gravity expr -F_g_y+sin(phi)*cos(theta)*m*g'};...
                {'F_g_z phi theta par m g sub gravity expr -F_g_z+cos(phi)*cos(theta)*m*g'};...
                ];
            
            % Aerodynamics
            dyn = [dyn;...
                {'F_a_x ni alpha ni beta F_D ni F_Y ni F_L sub aerodynamics expr -F_a_x-cos(alpha)*F_D-cos(alpha)*sin(beta)*F_Y+sin(alpha)*F_L'};... 
                {'F_a_y ni beta ni F_D F_Y sub aerodynamics expr -F_a_y-sin(beta)*F_D+cos(beta)*F_Y'};...
                {'F_a_z ni alpha ni beta ni F_D ni F_Y F_L sub aerodynamics expr -F_a_z-sin(alpha)*cos(beta)*F_D-sin(alpha)*sin(beta)*F_Y-cos(alpha)*F_L'};... 
%                 {'dx_cl p_cl_x p_cm_x sub aerodynamics expr -dx+p_cl_x-p_cm_x'};...
%                 {'dy_cl p_cl_y p_cm_y sub aerodynamics expr -dy+p_cl_y-p_cm_y'};...
%                 {'dz_cl p_cl_z p_cm_z sub aerodynamics expr -dz+p_cl_z-p_cm_z'};...
%                 {'T_atot_x T_a_x sub aerodynamics'};... 
%                 {'T_atot_y T_a_y sub aerodynamics expr -T_atot_y+T_a_y'};...
%                 {'T_atot_z T_a_z sub aerodynamics'};...
                {'q_bar rho V_a sub aerodynamics expr -q_bar+0.5*rho*V_a*V_a'};...
                {'F_D ni q_bar C_D sub aerodynamics expr -F_D+q_bar*S*C_D'};...
                {'F_Y ni q_bar C_Y sub aerodynamics expr -F_Y+q_bar*S*C_Y'};...
                {'F_L ni q_bar C_L sub aerodynamics expr -F_L+q_bar*S*C_L'};...
                {'C_D ni V_a ni alpha ni q ni ni delta_e par C_D_O par C_D_alpha par C_D_q par C_D_delta_e sub aerodynamics expr -C_D+C_D_0+C_D_alpha*alpha+C_D_q*c*0.5/V_a*q+C_D_delta_e*delta_e'};...
                {'C_Y ni V_a ni beta ni p ni r ni delta_r par C_Y_0 par C_Y_beta par C_Y_p par C_Y_delta_r sub aerodynamics expr -C_Y+C_Y_0+C_Y_beta*beta+C_Y_p*b*0.5/V_a*p+C_Y_delta_r*delta_r'};...
                {'C_L ni V_a ni alpha ni ni q ni delta_e par C_L_0 par C_L_alpha par C_L_q par C_L_delta_e sub aerodynamics expr -C_L+C_L_0+C_L_alpha*alpha+C_L_q*c*0.5/V_a*q+C_L_delta_e*delta_e'};...
                {'T_a_x ni q_bar C_l sub aerodynamics'};...
                {'T_a_y ni q_bar C_m par S par c sub aerodynamics expr -T_a_y+q_bar*S*c*C_m'};...
                {'T_a_z ni q_bar C_n sub aerodynamics'};...
                {'C_l ni V_a ni beta ni p ni r ni delta_a ni delta_r sub aerodynamics'};...
                {'C_m ni V_a ni alpha ni q ni delta_e par C_m_0 par C_m_alpha par C_m_q par C_m_delta_e sub aerodynamics expr -C_m+C_m_0+C_m_alpha*alpha+C_m_q*c*0.5/V_a*q+C_m_delta_e*delta_e'};...
                {'C_n ni V_a ni beta ni p ni r ni delta_a ni delta_r sub aerodynamics'};...
                ];
            
            % Propeller
            dyn = [dyn;...
                {'fault F_t_x P_prop ni n_coeff ni u_r sub propeller expr -F_t_x+P_prop*abs(n_coeff/u_r)'};... % Using propeller model
                {'F_t_y sub propeller expr -F_t_y+0'};...
                {'F_t_z sub propeller expr -F_t_z+0'};...
                {'T_t_x P_prop ni w_prop sub propeller expr -T_t_x+P_prop/w_prop'};...
                {'T_t_y sub propeller expr -T_t_y+0'};...
                {'T_t_z sub propeller expr -T_t_z+0'};...
                {'dx_prop p_prop_x p_cm_x sub propeller expr -dx_prop+p_prop_x-p_cm_x'};...
                {'dy_prop p_prop_y p_cm_y sub propeller expr -dy_prop+p_prop_y-p_cm_y'};...
                {'dz_prop p_prop_z p_cm_z sub propeller expr -dz_prop+p_prop_z-p_cm_z'};...
                {'T_ttot_x T_t_x ni dz_prop ni dy_prop ni F_t_x ni F_t_z sub propeller'};...
                {'T_ttot_y T_t_y ni dz_prop ni dx_prop ni F_t_x F_t_z sub propeller expr -T_ttot_y+T_t_y+dz*F_t_x-dx*F_t_z'};...
                {'T_ttot_z T_t_z ni dy_prop ni dx_prop ni F_t_x F_t_y sub propeller'};...
                {'n_prop w_prop sub propeller expr -n_prop+w_prop/2/3.14159'};...
                {'Jar V_a n_prop param D sub propeller expr -Jar+V_a/n_prop/D'};...
                {'fault P_prop C_p ni rho ni n_prop param D sub propeller expr -P_prop+C_p*rho*n_prop^3*D^5'};...
                {'fault C_p ni Jar sub propeller expr -C_p+0.0661-0.1647*Jar+0.2958*Jar^2-0.2355*Jar^3'};...
                {'fault n_coeff ni Jar sub propeller expr -n_coeff+0.0+3.19*Jar-12.15*Jar^2+27.83*Jar^3-21.82*Jar^4'};....
                ];
            
            der = [der;...
                {'int dot_n_prop dot n_prop sub propeller expr differentiator'};...
                ];
            
            % Motor
            dyn = [dyn;...
                {'dot_n_prop P_mot P_prop ni n_prop par J_mot sub motor expr -dot_n_prop+1/J_mot*(P_mot-P_prop)'};...
                {'fault n_prop n_mot sub motor expr -n_prop+n_mot'};...
                {'fault n_mot E_i par K_v sub motor expr -n_mot+K_v*E_i'};...
                {'fault E_i V_mot I_mot par R_m sub motor expr -E_i+V_mot-I_mot*R_m'};...
                {'P_mot ni E_i ni I_i sub motor expr -P_mot+E_i*I_i'};...
                {'fault I_i I_mot E_i par I_0 sub motor expr -I_i+I_mot-I_0'};...
%                 {'P_elec ni V_mot ni I_mot sub motor'};...
                {'fault V_mot V_bat I_mot ni delta_t par R_s sub motor expr -V_mot+(V_bat-I_mot*R_s)*delta_t'};...
                ];
            
            %% Other models
            
            mod = [];
            
            mod = [mod;...
                {'north z lat lat_0 par R_M sub earth expr -north+(R_M+z)*sin(lat-lat_0)'};... % Earth model
                {'east z lon lon_0 par R_N sub earth expr -east+(R_N+z)*sin(lon-lon_0)'};...
                {'down z z_0 sub earth expr -down-(z-z_0)'};... % NED altitude offset from geometric altitude
                {'h z par r_0 sub earth expr -z+r_0*h/(r_0-h)'};... % geopotential altitude
                {'T T_0 ni h ni h_0 par L_0 sub athmosphere expr -T+T_0+L_0*(h-h_0)'};... % Temperature gradient
                {'P P_0 ni T_0 ni T par M_0 par R_star par g_0 sub athmosphere expr -P+P_0*pow(T_0/T,g_0*M_0/R_star/L_0)'};... % Pressure gradient
                {'h ni T_0 ni P ni P_0 h_0 par L_0 par g_0 par M_0 par R_star sub athmosphere expr -h+T_0/L_0*(pow(P/P_0,g_0*M_0/R_star/L_0)-1)+h_0'};... % Barometric altitude calcuation
                {'rho P T par M_0 par R_star sub athmosphere expr -rho+P*M_0/R_star/T'};... % density gradient
                {'P_t P rho V_a sub athmosphere expr -P_t+P+0.5*rho*V_a*V_a'};... % dynamic pressure
                {'u_w ni phi ni theta ni psi ni w_n ni w_e sub athmosphere expr -u_w+(cos(theta)*cos(psi))*w_n+(cos(theta)*sin(psi))*w_e'};... %Assumption ww = 0; % Wind Model
                {'v_w ni phi ni theta ni psi ni w_n ni w_e sub athmosphere expr -v_w+(sin(phi)*sin(theta)*cos(psi)-cos(phi)*sin(psi))*w_n+(sin(phi)*sin(theta)*sin(psi)+cos(phi)*cos(psi))*w_e'};... %Assumption ww = 0; % Wind Model
                {'w_w ni phi ni theta ni psi ni w_n ni w_e sub athmosphere expr -w_w+(cos(phi)*sin(theta)*cos(psi)+sin(phi)*sin(psi))*w_n+(cos(phi)*sin(theta)*sin(psi)-sin(phi)*cos(psi))*w_e'};... %Assumption ww = 0; % Wind Model
                {'w_n sub atmosphere expr -w_n+0'};... % Known wind magnitude and direction % TODO Verify
                {'w_e sub atmosphere expr -w_e+0'};... % TODO Verify
                ];
            
            %% Sensory equations
            
            msr = [];
            
            msr = [msr;...
                {'fault msr a_m_x F_x ni par m ni g theta sub sensors expr -a_m_x+F_x/m+sin(theta)*g'};... % Acceleration
                {'fault msr a_m_y F_y ni par m ni g phi ni theta sub sensors expr -a_m_y+F_y/m-sin(phi)*cos(theta)*g'};...
                {'fault msr a_m_z F_z ni par m ni g phi theta sub sensors expr -a_m_z+F_z/m-cos(phi)*cos(theta)*g'};...
                {'fault msr p_m p sub sensors expr -p_m+p'};... % Angular velocity
                {'fault msr q_m q sub sensors expr -q_m+q'};...
                {'fault msr r_m r sub sensors expr -r_m+r'};...
                {'fault msr phi_m phi sub sensors expr -phi+phi_m'};... % Euler angles
                {'fault msr theta_m theta sub sensors expr -theta+theta_m'};...
                {'fault msr psi_m psi sub sensors expr -psi+theta_m'};...
                {'msr lat_0_gps lat_0 sub sensors expr -lat_0+lat_0_gps'};... % GPS measurements
                {'msr lon_0_gps lon_0 sub sensors expr -lon_0+lon_0_gps'};...
                {'msr lat_gps lat sub sensors expr -lat+lat_gps'};...
                {'msr lon_gps lon sub sensors expr -lon+lon_gps'};...
                {'msr z_gps z sub sensors expr -z+z_gps'};...
                {'msr V_g_gps V_g sub sensors expr -V_g+V_g_gps'};...
                {'msr chi_gps chi sub sensors expr -chi+chi_gps'};...
                {'msr T_0_m T_0 sub initializations expr -T_0+T_0_m'};... % Initialization temperature
                {'msr z_0_m z_0 sub initializations expr -z_0+z_0_gps'};... % Initialization altitude
                {'z_0 h_0 par r_0 sub initializations expr -z_0+r_0*h_0/(r_0-h_0)'};...
                {'msr P_bar P sub sensors expr -P+P_bar'};... % Barometer reading
                {'msr T_m T sub sensors expr -T_m+T'};... % Therometer reading
                {'fault msr P_t_m P_t sub sensors expr -P_t+P_t_m'};... % Pitot reading
                {'fault msr alpha_m alpha sub sensors expr -alpha+alpha_m'};.... % AoA reading
                {'fault msr beta_m beta sub sensors expr -beta+beta_m'};... % AoS reading
                {'msr V_mot_m V_mot sub sensors expr -V_mot_m+V_mot'};... % Battery voltage measurement
                {'msr I_mot_m I_mot sub sensors expr -I_mot_m+I_mot'};... % Battery current measurement
                {'msr n_prop_m n_prop sub sensors expr -n_prop_m+n_prop'};... % Motor rps measurement
                {'fault delta_a inp delta_a_inp sub actuators expr -delta_a+delta_a_inp'};...
                {'fault delta_e inp delta_e_inp sub actuators expr -delta_e+delta_e_inp'};...
                {'fault delta_t inp delta_t_inp sub actuators expr -delta_t+delta_t_inp'};...
                {'fault delta_r inp delta_r_inp sub actuators expr -delta_r+delta_r_inp'};...
                {'p_prop_x sub constants expr -p_prop_x+0'};...
                {'p_prop_y sub constants expr -p_prop_y+0'};...
                {'p_prop_z sub constants expr -p_prop_z+0'};...
%                 {'p_cl_x sub constants expr -p_cl_x+0'};... % Known center of lift % TODO find actual values
%                 {'p_cl_y sub constants expr -p_cl_y+0'};...
%                 {'p_cl_z sub constants expr -p_cl_z+0'};...
                {'g par g_0 sub constants expr -g+g_0'};... % Taking static gravity for now
                ];
            
            
            %% Summing up
            this.constraints = [...
                {kin},{'k'};...
                {dyn},{'f'};...
                {der},{'d'};...
                {mod},{'m'};...
                {msr},{'s'};...
                ];
            
            %% Specifying node coordinates if available
            this.coordinates = [];
            
        end
        
    end
    
end