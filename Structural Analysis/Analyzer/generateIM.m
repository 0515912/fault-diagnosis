function [ IMStruct ] = generateIM( gi, FSStruct, excluded_fault_ids )
%GENERATEIM Generate Isolation Matrix
%   INPUTS:
%   gi      : The initial graph interface
%   FSStruct: Fault Signature Structure, as generated by generateFSM()

if nargin<3
    excluded_fault_ids = [];
end

% Remove the non-detectable faults from the FSM
nd_faults_ids = FSStruct.non_detectable_fault_ids;
nd_faults_mask = ismember(FSStruct.fault_ids, nd_faults_ids);

% Remove custom fault_ids from the FSM
excl_fault_mask = ismember(FSStruct.fault_ids, excluded_fault_ids);

fault_mask = ones(1,length(FSStruct.fault_ids)) & (~nd_faults_mask) & (~excl_fault_mask);

FSM=FSStruct.FSM(:,fault_mask);

% Calculate the isolability matrix
numFaults = size(FSM,2);
numRes = length(FSStruct.residual_constraints);
IM = ones( numFaults, numFaults );

for i=1:numRes
    % For each residual you can decouple those faults which are raised from
    % those faults which are not raised
    IM(FSM(i,:)>0,FSM(i,:)==0)=0;
end

% Get all the fault ids and aliases
fault_ids = setdiff(FSStruct.fault_ids, [nd_faults_ids excluded_fault_ids]);
fault_aliases = gi.getAliasById(fault_ids);

% Build the output
IMStruct.IM = IM;
IMStruct.fault_ids = fault_ids;
IMStruct.fault_aliases = fault_aliases;

end

