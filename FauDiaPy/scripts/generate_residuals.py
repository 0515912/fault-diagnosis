# title           : generate_residuals
# description     : read matching results and constraint info and generate residual
# author          : George Zogopoulos-Papaliakos
# date            : 22/1/2018
# version         :
# notes           :
# licence         : Apache 2.0
#==============================================================================

import graph.graph_utils as gu
import residual_generator.utils as rgu
import logging
import csv


def read_variables(input_file):
    '''
    Read the variable information from the input file
    :param input_file: csv file, generated by MATLAB
    :return: A list of Variable objects
    '''

    variable_array = []

    with open(input_file, 'r') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',')
        for row in csv_reader:
            new_variable = gu.Variable(int(row[0]), row[1])
            new_variable.is_matrix = True if row[2] == 1 else False  # Set the is_matrix property
            variable_array.append(new_variable)

    return variable_array


def read_equations(input_file):
    '''
    Read the equations information from the input file
    :param input_file: csv file, generated by MATLAB
    :return: A list of Equation objects
    '''

    equation_array = []

    with open(input_file, 'r') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',')
        for row in csv_reader:
            new_equation = gu.Equation(input_id=int(row[0]), alias=row[1], expression_str=row[2], expression=row[3])
            equation_array.append(new_equation)

    return equation_array


def read_calc_sequence(input_file):
    '''
    Read the matching information from the input file
    :param input_file:
    :return: Fully ordered list of required substitutions
    '''

    solution_order = []

    with open(input_file, 'r') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',')
        header = True  # Header flag
        scc = []
        for row in csv_reader:
            if header:  # Throw out the header
                header = False
                continue

            if row[0]=='$':  # Found the start of an SCC
                # Close and store the previous scc
                if scc:
                    solution_order.append(scc)
                scc = []  # Reset the scc
                continue

            if len(row) == 1:  # This should be the last row, the residual calculation
                scc.append([(int(row[0]))])
            else:
                # This row is an assignment, add it to the scc
                scc.append((int(row[0]), int(row[1])))  # Add the equation->variable tuple

        # Close the last scc
        solution_order.append(scc)

    return solution_order


def read_equations_variables_relations(input_file):
    '''
    Read the information about equations and their related variables from the input file
    :param input_file: csv file containing in each line "equ_id, var1_id, var2_id...
    :return: list of tuples (equ_id, [var_id_array])
    '''

    relations = []

    with open(input_file, 'r') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',')
        for row in csv_reader:
            temp_tuple = (int(row[0]), map(int, row[1:]))
            relations.append(temp_tuple)

    return relations


logger = logging.getLogger()  # Instantiate root logger object
logger.setLevel(logging.DEBUG)  # Allow all messages to go through it

sh = logging.StreamHandler()  # Instantiate console logger
sh.setLevel(logging.INFO)  # Allow INFO and up to pass it
formatter = logging.Formatter('%(message)s')  # Set its format
sh.setFormatter(formatter)
logger.addHandler(sh)  # Add it to the root logger

fh = logging.FileHandler('faudia.log', 'w')  # Instantiate log file logger
fh.setLevel(logging.DEBUG)  # Allow all messages to go through it
formatter = logging.Formatter('%(filename)-25s / %(name)-15s / %(funcName)-15s: %(levelname)8s: %(message)s')  # Set its format
fh.setFormatter(formatter)
logger.addHandler(fh)  # Add it to the root logger

logger.info('Started test script')


# Read variables
variables_file = '../variablesExpr.csv'
variables = read_variables(variables_file)

# Read equations
equations_file = '../equationsExpr.csv'
equations = read_equations(equations_file)

# Read relations
relations_file = '../equations-variables.csv'
relations = read_equations_variables_relations(relations_file)

# Read assignments
assignments_file = '../calc_seq_2_567.csv'
solution_order = read_calc_sequence(assignments_file)

evaluators_ordered = rgu.create_evaluators(solution_order, equations, variables, relations)


logger.info('Finished test script')
